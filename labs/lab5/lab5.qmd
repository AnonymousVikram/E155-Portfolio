---
title: "Lab 5"
format:
  html:
    code-links:
      - text: Github Repo
        icon: github
        href: https://github.com/AnonymousVikram/e155-lab5
---

## Overview

The primary purpose of this lab is to understand the fundamentals of interrupts. This was then applied to reading from a quadrature encoder.
As the quadrature encoder has two channels, we design a multi-interrupt routine to gain accurate readings, and apply this to
printing the speed of a DC motor.

## Design

### Background

A quadrature encoder works by positioning two sensors 90 degrees apart from each other. This allows us to determine the direction of rotation of the motor, along with more granular readings of the motor's position.
From the [datasheet](https://hmc-e155.github.io/assets/lab/25GA370.pdf) of the motor, we know that the encoder has 12 counts per revolution.
Translating this to the motor, we realize that there are 120 counts per revolution, as the motor has a 10:1 gear ratio.

Fundamentally, my design involved setting up interrupts and handlers to read from the encoder and update a global variable that stores the number of 'ticks'.
I implemented a basic lookup table to determine the direction of rotation based on the previous and current states of the encoder, allowing me to increment or decrement the tick count accordingly.
From this, I set up the SysTick interrupt to print the current angular velocity of the motor every 1s.
Ticks are converted to rpm by $\text{rpm} = \frac{\text{ticks}}{120} \times 60$ since there are 120 ticks per revolution and 60s in a minute.

### Interrupts

There were three interrupts that I set up for this lab: PA5 and PA6 as inputs from the encoder, and SysTick as a timer interrupt.
I chose PA5 and PA6 as not only are they 5V tolerant, but they are also configured on the same EXTI line, allowing me to use a single interrupt handler for both pins.
The EXTI handler was used to read the current state of the encoder and update the tick count accordingly.
Each time that it was triggered, the handler reads in the current values, and compares it with the previous state to reference a lookup table to determine the direction of rotation.
Then, the tick count is either added or subtracted as needed.
Then, the current state is stored as the previous state for the next interrupt, and the handler returns.

The SysTick interrupt was set up to trigger every 1ms, and every time the time counter reaches 1000, the rpm is calculated and printed to the console.
After printing, the tick count is reset to 0, and the time counter is reset to 0.

A key point to note is that the SysTick interrupt is set to a higher priority than the EXTI interrupt, as we want to ensure that the rpm is printed accurately every second.

A flowchart of the interrupt routine is shown in  @fig:interrupts.

::: {#fig:interrupts}
![Interrupt Routine Flowchart](images/interrupts.png)
:::


## Analysis

An alternative to the multi-interrupt routine exercised in this lab would be to use a timer-based polling approach. In fact, from my previous background, this would've been the first approach I would've taken.
However, the multi-interrupt routine is more efficient, as it allows the MCU to perform other tasks while waiting for the encoder to trigger an interrupt.
Further, the multi-interrupt routine is more accurate, as it can capture the exact moment the encoder changes state, rather than polling at a fixed rate.

According to [Valvano and Yerraballi](https://users.ece.utexas.edu/~valvano/Volume1/E-Book/C12_Interrupts.htm), the periodic polling approach has an average latency of $T/2$, where $T$ is the period of the polling.
On the other hand, the interrupt approach has an average latency of $T_{\text{interrupt}}$, where $T_{\text{interrupt}}$ is the time taken to service the interrupt, often significantly less than $T$.
This makes the interrupt approach more responsive and accurate than the polling approach.

In addition, the polling approach would require more power, as the MCU would have to constantly check the encoder's state. This is in contrast to the interrupt approach, where the MCU can sleep until an interrupt is triggered, saving power. Typically, the polling approach should only be used if the IO cannot generate an interrupt, and the IO functions should be done in the background.

However, in the use case for this lab, the interrupt approach is more efficient and accurate, making it the better choice.

## Conclusion

Overall, I successfully implemented a multi-interrupt routine to read from a quadrature encoder and print the speed of a DC motor. I also learned the importance of interrupts and how they can be used to make the MCU more efficient and accurate. I  spent around 9 hours on this lab.