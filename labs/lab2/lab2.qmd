---
title: "Lab 2"
format:
  html:
    code-links:
      - text: Github Repo
        icon: github
        href: https://github.com/AnonymousVikram/e155-lab2
---

## Overview

Per the guidelines provided, the main goals of this lab were to:

-   Learn about and implement time multiplexing to drive two seven-segment displays

-   Use transistors to provide greater current to drive the displays using FPGA GPIO Pins

This involved not only reading datasheets and refreshing my memory on what transistors are and how they work, but also understanding the logic behind using time to multiplex a signal and how I can wire up the circuit. It also required a little bit of thought into the frequency at which I could switch between the two displays to avoide both flickering and bleeding.

I wrote a testbench for this lab as well, and this time I wrote a Python script to generate my test cases!


## Design

For the SystemVerilog top module (`lab2_vk`), I only ended up using one submodule, the seven-segment display module created in [Lab 1](https://github.com/AnonymousVikram/e155-lab1). I then used a similar counter from my `ledDecoder` to implement the time multiplexing. I also simply added together the values of the two switches to get the sum. The block diagram for this design can be seen in @fig-block-diagram:

::: {#fig-block-diagram}
![](images/blockdiagram.png)

Block Diagram of my SystemVerilog Design
:::

As for the circuit, it was largely based off of the values calculated from [Lab 1](https://github.com/AnonymousVikram/e155-lab1). But, with the added transistors, there was the need for a current-limiting resistor. From the datasheet for the iCE40UP, we can determine that the maximum current draw should be 8 $mA$. Plugging this into Ohm's Law ($V = IR$), with $V = 3.3V$ and I = $0.008A$, we get that
$$
R \geq \frac{3.3}{0.008} = 412.5\Omega
$$

With the resistor values available in the lab, I went with $470 \Omega$ resistors. This schematic can be seen in @fig-circuit-diagram

::: {#fig-circuit-diagram}
![](images/circuitdiagram.png)

Circuit Diagram of my physical implementation
::::


## Testing

The testing for this lab was a little more complicated than Lab 1. There were two states to check, along with 8 input bits and the output sum as well. This would result in $2^8 \cdot 2 = 512$ testcases. Thus this week, I wrote a [Python script](https://github.com/AnonymousVikram/e155-lab2/blob/main/fpga/sim/testgen.py) to generate the test vectors. The test results are below:

### Waveform

![](images/waveform.png){width="2528"}

### Result

![](images/result.png){width="2664"}

## Conclusion

My design was successful in meeting all the requirements for this lab. I also believe I succeeded in meeting the goals of the overall lab. I spent 13 hours on this lab.